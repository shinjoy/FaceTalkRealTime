package com.nomadsoft.chat.db.dao;

import io.netty.channel.Channel;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;

import javax.swing.text.AbstractDocument.Content;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.nomadsoft.chat.config.Constants;
import com.nomadsoft.chat.db.dto.BoardImageFile;
import com.nomadsoft.chat.db.dto.ChatReq;
import com.nomadsoft.chat.db.dto.ChatRoom;
import com.nomadsoft.chat.log.Log;
import com.nomadsoft.chat.openServer.ChatUserContext;
import com.nomadsoft.chat.utility.ChatDate;
import com.nomadsoft.chat.utility.MsgKey;

public class ChatReqDao {
/*
	public static void deleteChatReq(String MSG_KEY) {
		

		Connection connection = DBConnectionPool.getConnection();		
		try {
			 
			String query = 
					"DELETE FROM T_CHAT_REQ WHERE MSG_KEY = ? ";

			PreparedStatement stmt = connection.prepareStatement(query);
			stmt.setString(1, MSG_KEY);
			
			stmt.executeUpdate();			
			stmt.close(); 
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				connection.close();
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
		
	}
*/
	public static void loadChatReq() {
		/*
		Connection connection = DBConnectionPool.getConnection();				
		try {				 
			String query = "SELECT Top 100 cq_id, ROOM_IDX, REQ_TYPE, MEMBER_ID, MEMBER_NAME,"
					+ " msg_key, msg_date, contents, REG_DATE, PARAM1, PARAM2, thumb1, thumb2, thumb3, fileName1, fileName2, fileName3, targetid  " 
				+ "FROM t_nf_chat_req order by reg_date desc "; 
			
			Statement statement = connection.createStatement();
			ResultSet rs = statement.executeQuery(query);	
			
			Statement stmt = connection.createStatement();
			while(rs.next()) {
									
				ChatReq chatreq = new ChatReq();
				chatreq.setCqId(rs.getInt("cq_id"));
				chatreq.setReqTYPE(rs.getString("REQ_TYPE"));
				chatreq.setRoomIDX(rs.getString("ROOM_IDX"));				
				chatreq.setMemberID(rs.getString("MEMBER_ID"));
				chatreq.setMemberName(rs.getString("MEMBER_NAME"));
				chatreq.setRegDATE(rs.getString("REG_DATE"));
				chatreq.setParam1(rs.getString("PARAM1"));
				chatreq.setParam2(rs.getString("PARAM2"));				
				
				
				chatreq.setMsgKey(rs.getString("msg_key"));
				chatreq.setMsgDate(rs.getString("msg_date"));
				chatreq.setContents(rs.getString("contents"));
				
				chatreq.setThumb1(rs.getString("thumb1"));
				chatreq.setThumb2(rs.getString("thumb2"));
				chatreq.setThumb3(rs.getString("thumb3"));
				
				chatreq.setFileName1(rs.getString("fileName1"));
				chatreq.setFileName2(rs.getString("fileName2"));
				chatreq.setFileName3(rs.getString("fileName3"));
				chatreq.setTargetid(ChatDBhelper.getSafeString(rs.getString("targetid")));
				
				
				String sql = "delete from t_nf_chat_req where cq_id = " + chatreq.getCqId();
				stmt.execute(sql);		
				
				
				//--------------------
				
				
				//내용 전달.		
				if( chatreq.getReqTYPE().equals("10") || 
					chatreq.getReqTYPE().equals("11") ||
					chatreq.getReqTYPE().equals("12") ||
					chatreq.getReqTYPE().equals("13") ||
					chatreq.getReqTYPE().equals("14") ||
					chatreq.getReqTYPE().equals("15") ||
					chatreq.getReqTYPE().equals("16")
					) {
					
					//신고, 소명, 댓글 수신. 공유, 조치, 댓글.
					String roomIdx = "";
					
					if(chatreq.getReqTYPE().equals("10") 
							&& "".equals(chatreq.getTargetid()) == false) {						
						
						// sk , kt, lg 
						roomIdx = ChatDao.getRoomIdxByTarget(chatreq.getTargetid());
						chatreq.setMsgKey("");
					} else if(chatreq.getReqTYPE().equals("16")) {
						if (chatreq.getParam2().equals("") == false) {
							roomIdx = "";
						} else {
							//그룹 ID
							roomIdx = ChatDao.getRoomIdxByGroupID(chatreq.getParam2());
						}
						
					} else {								
						if (chatreq.getMsgKey().equals("") == false) {
							roomIdx = ChatDao.getRoomIdx(chatreq.getMsgKey());
							
						} else {
							//그룹 ID
							roomIdx = ChatDao.getRoomIdxByGroupID(chatreq.getParam2());
						}
					}
					
					String contentes = chatreq.getContents();
					
					
					String cType = chatreq.getReqTYPE();  
					String mType = "0";
					
					ArrayList<BoardImageFile> files = new ArrayList<BoardImageFile>();
					if(chatreq.getFileName1().equals("") == false) {
						BoardImageFile fItem = new BoardImageFile();
						
						fItem.setThumbFilename_server(chatreq.getThumb1());
						fItem.setFilename_server(chatreq.getFileName1());
						
						fItem.setFileType("img");
						files.add(fItem);
					} 
					
					if(chatreq.getFileName2().equals("") == false) {
						BoardImageFile fItem = new BoardImageFile();
						
						fItem.setThumbFilename_server(chatreq.getThumb2());
						fItem.setFilename_server(chatreq.getFileName2());
						
						fItem.setFileType("img");
						files.add(fItem);
					} 
					
					if(chatreq.getFileName3().equals("") == false) {
						BoardImageFile fItem = new BoardImageFile();
						
						fItem.setThumbFilename_server(chatreq.getThumb3());
						fItem.setFilename_server(chatreq.getFileName3());
						
						fItem.setFileType("img");
						files.add(fItem);
					} 
					
					String fileName = "";
					if(files.size() > 0) {
						fileName = getFileJson(files);
					}
					String option1 = "";//chatreq.getParam1();  //신고, 소명 메시지 키.
					String option2 = "";//chatreq.getMemberID();  //글쓴이 ID.
					String option3 = "";//chatreq.getMemberName();  //글쓴이 이름.
					
					JSONObject jObject = new JSONObject();
					jObject.put("rSeq", chatreq.getParam1());   //신고글의 키값.   
					jObject.put("cKey", chatreq.getMsgKey()); //채팅 원글의 Seq
					jObject.put("uId", chatreq.getMemberID());
					jObject.put("uName", chatreq.getMemberName());
					option1 = jObject.toString();
					
					
					Date date = null;	
					String sDate = "";
					if(chatreq.getMsgDate() == null || chatreq.getMsgDate().equals("")) {
						date = new Date();
						sDate = ChatDate.getFormatterServerDate().format(date); 
					} else {
						date = ChatDate.getFormatterReqDate().parse(chatreq.getMsgDate());
						sDate = ChatDate.getFormatterServerDate().format(date); //chatreq.getMsgDate();//				
					}
					
					option2 = sDate;  //메시지의 시간.
					
						
					String newDate = "";
					if(chatreq.getMsgKey().equals("") == false) {
						newDate = ChatMsgDao.getChatDate(chatreq.getMsgKey()).substring(0, 19);
						
						date = ChatDate.getFormatterReqDate2().parse(newDate);
						newDate = ChatDate.getFormatterServerDate().format(date);
								
						sDate = newDate;
					} 
					
					if(chatreq.getReqTYPE().equals("16") &&  roomIdx.equals("") ) {
						LinkedList<ChatRoom> list =  ChatDao.getReportRoomList();
						for(ChatRoom chatRoom : list) {
							roomIdx = String.valueOf(chatRoom.getChatRoomSeq());
							String msgKey = MsgKey.getMsgKey();
							ChatMsgDao.sendMsg(null, true, sDate, msgKey,
									roomIdx, mType, cType,
									Constants.adminId, contentes, fileName, option1, option2, option3, date, "");	
						}	
						
					} else {
						String msgKey = MsgKey.getMsgKey();
						ChatMsgDao.sendMsg(null, true, sDate, msgKey,
								roomIdx, mType, cType,
								Constants.adminId, contentes, fileName, option1, option2, option3, date, "");
						
					}
					
					
				} else if(chatreq.getReqTYPE().equals("1")){
					//1 : 멤버 추가. 
					String memberId =  chatreq.getMemberID();  //아이디.
					String groupId =  chatreq.getParam1();  //그룹 아이디.
					
					//채팅방 찾기.
					String roomIdx = ChatDao.getRoomIdxByGroupID(groupId);
					if(roomIdx.equals("") == false) {
						ChatDao.inviteMember(null, null, Constants.adminId, "1", Long.valueOf(roomIdx), memberId);
					}
					
					LinkedList<ChatRoom> list =  ChatDao.getShareRoomList();
					for(ChatRoom chatRoom : list) {
						ChatDao.inviteMember(null, null, Constants.adminId, "1", chatRoom.getChatRoomSeq(), memberId);
					}
					
				} else if(chatreq.getReqTYPE().equals("2")){
					//2 : 멤버 삭제. 
					String memberId =  chatreq.getMemberID();  //아이디.
					String groupId =  chatreq.getParam1();  //그룹 아이디.
					
					//채팅방 찾기.
					String roomIdx = ChatDao.getRoomIdxByGroupID(groupId);
					if(roomIdx.equals("") == false) {
						ChatDao.removeMember(null, null, "1", Long.valueOf(roomIdx),  Constants.adminId, memberId);
					}
					
					LinkedList<ChatRoom> list =  ChatDao.getShareRoomList();
					for(ChatRoom chatRoom : list) {
						ChatDao.removeMember(null, null, "1", chatRoom.getChatRoomSeq(),  Constants.adminId, memberId);
					}	
				} else if(chatreq.getReqTYPE().equals("3")){
					//3 : 관리자 추가. 
					String memberId =  chatreq.getMemberID();  //아이디.
					
					
					//채팅방 찾기.
					LinkedList<ChatRoom> list =  ChatDao.getDefaultRoomList();
					for(ChatRoom chatRoom : list) {
						ChatDao.inviteMember(null, null, Constants.adminId, "1", chatRoom.getChatRoomSeq(), memberId);
					}					
				} else if(chatreq.getReqTYPE().equals("4")){
					//4 : 관리자 삭제. 
					String memberId =  chatreq.getMemberID();  //아이디.
										
					//채팅방 찾기.
					LinkedList<ChatRoom> list =  ChatDao.getDefaultRoomList();
					for(ChatRoom chatRoom : list) {
						ChatDao.removeMember(null, null, "1", chatRoom.getChatRoomSeq(),  Constants.adminId, memberId);
					}					
				}
					
				
					
				//-------------------				
			}
			stmt.close();
			statement.close();
		} catch (Exception e) {
			// TODO: handle exception
			Log.i(e.getMessage());
		} finally {
			try {
				connection.close();
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
		
		*/
	}
	
	
	public static String getFileJson(ArrayList<BoardImageFile> files) {
		String result = "";
		
		try {
			if(files.size() > 0) {
				JSONObject jObject = new JSONObject();
				JSONArray jsArray = new JSONArray();
					
				BoardImageFile moveData = null;
				BoardImageFile locationData = null;
				
				for (int i = 0; i < files.size(); i++) {
					BoardImageFile bItem =  files.get(i);
					
					if(bItem.getFileType().equals("img")) {
						JSONObject jItem = new JSONObject();
						jItem.put("type", bItem.getFileType());					
						jItem.put("thumb", bItem.getThumbFilename_server());
						
						if(bItem.getFileType().equals("location")) {
							jItem.put("latitude", bItem.getFilename_normal());
							jItem.put("longtude", bItem.getFilename_server());
							
						} else {
							jItem.put("file", bItem.getFilename_server());	
						}
						
						jsArray.add(jItem);
					} else if(bItem.getFileType().equals("mov")) {
						moveData = bItem;
					} else if(bItem.getFileType().equals("location")) {
						locationData = bItem;
					}
				}
				
				
				if(moveData != null) {
					JSONObject jItem = new JSONObject();
					jItem.put("type", moveData.getFileType());					
					jItem.put("thumb", moveData.getThumbFilename_server());
					
					if(moveData.getFileType().equals("location")) {
						jItem.put("latitude", moveData.getFilename_normal());
						jItem.put("longtude", moveData.getFilename_server());
						
					} else {
						jItem.put("file", moveData.getFilename_server());	
					}
					
					jsArray.add(jItem);
				}
				
				if(locationData != null) {
					JSONObject jItem = new JSONObject();
					jItem.put("type", locationData.getFileType());					
					jItem.put("thumb", locationData.getThumbFilename_server());
					
					if(locationData.getFileType().equals("location")) {
						jItem.put("latitude", locationData.getFilename_normal());
						jItem.put("longtude", locationData.getFilename_server());
						
					} else {
						jItem.put("file", locationData.getFilename_server());	
					}
					
					jsArray.add(jItem);
				}
				
				jObject.put("items", jsArray);
				result = jObject.toString();
			}
			
		} catch (Exception e) {
			System.out.println("Exception occured");
		}
		
		return result;
	}
}
